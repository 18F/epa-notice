schema_version: "2.0"
name: eManifest Application
documentation_complete: false
verifications:
  aws-s3-urls:
    name: Amazon Web Services' S3 Authorized URLs
    path: http://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html
    type: URL
  new-relic:
    name: New Relic Application Monitoring
    path: https://newrelic.com/application-monitoring
    type: URL
  github:
    name: Repository's Github
    path: https://github.com/eregs/notice-and-comment
    type: URL
  travis:
    name: Repository's Travis CI
    path: https://travis-ci.org/eregs/notice-and-comment
    type: URL
  cups:
    name: Custom User Provided Service Documentation
    path: https://docs.cloudfoundry.org/devguide/services/user-provided.html
    type: URL
satisfies:
  - standard_key: NIST-800-53
    control_key: AC-2   # Account Management
    narrative: >
      Within our application (see cloud.gov for lower-level controls), user
      accounts are not created or managed. The user's browser stores state
      locally via LocalStorage. Users may upload attachments, which are stored
      in S3 with a random identifier; only the user's browser knows how to
      connect a specific user with their data. Users submit a single bundle of
      comments, which triggers the LocalStorage to be cleared.
  - standard_key: NIST-800-53
    control_key: AC-3   # Access Enforcement
    narrative: >
      At the application level (see cloud.gov for lower-level controls),
      access restrictions are largely enforced by HTTP BASIC AUTH credentials.
      These are necessary to write regulatory data to the system or to access
      any pages when in a staging environment. Combined, the user name and
      password are 32 randomly generated hexadecimal characters. For more
      details, see https://github.com/eregs/notice-and-comment#updating-data.
      The ability to write (and submit) comments is further restricted by a
      date check (commenting is only available within a specific time frame),
      though there is little harm in accepting comments outside of this
      window.
  - standard_key: NIST-800-53
    control_key: AC-6   # Least Privilege
    narrative: >
      At the application level (see cloud.gov for lower-level controls), users
      are only permitted access to their own data. While the user is adding
      comments, data is stored in their local browser. Uploaded files and
      generated pdfs *are* accessible via S3 URLs, but require correct
      signatures and must be used within an hour of issuance. Aside from S3,
      once data is submitted, it is not retrievable.
    references:
      - verification: aws-s3-url
  - standard_key: NIST-800-53
    control_key: AU-2   # Audit Events
    narrative: >
      Cloud.gov logs requests, failures, warnings, etc. emitted by the
      application. We also utilize New Relic, which registers Python-level
      exceptions and periods of down-time. The only application-level audits
      are around comment submission failures. If regulations.gov will not
      accept a comment submission for any reason, we record the submission to
      a database record for later human intervention.
    references:
      - verification: new-relic
  - standard_key: NIST-800-53
    control_key: AU-6   # Audit Review, Analysis, and Reporting
    narrative: >
      In addition to the low-level reporting provided by cloud.gov, New Relic
      sends email alerts to the team after repeated errors or down-time.
      Failed submissions (which are logged in the database) do not send
      automatic notifications. We must review this data manually, roughly once
      a week during the comment period (~ 60 days)
    references:
      - verification: new-relic
  - standard_key: NIST-800-53
    control_key: CA-8   # Penetration Testing
    narrative: No controls on top of cloud.gov's
  - standard_key: NIST-800-53
    control_key: CM-2   # Baseline Configuration
    narrative: No controls on top of cloud.gov's
  - standard_key: NIST-800-53
    control_key: CM-3   # Configuration Change Control
    narrative: >
      In addition to cloud.gov controls, all code is reviewed on GitHub before
      being merged into the "master" branch. These changes are tested
      automatically via Travis CI (which runs unit, integration tests, and
      static analysis) as well as manual testing for visual regressions
      (though this is partially automated). Proposed changes have appropriate
      justification (describing problems resolved or referencing further
      details in an issue tracker) in either their commit history or as part
      of the Github Pull Request.  Proposed changes which fail automated tests
      are generally not merged.  Only the tested, "master" branch code is
      deployed, though it is deployed on an ad-hoc basis.
    references:
      - verification: github
      - verification: travis
  - standard_key: NIST-800-53
    control_key: CM-6   # Configuration Settings
    narrative: >
      As described in the README, configurable settings are defined in a
      handful of locations. Configurations which can be shared between
      cloud.gov environments are located in the manifest_base.yml,
      notice_and_comment/settings/base.py and prod.py files ("prod" here
      meaning in contrast to local development). Configurations which are
      specific to one cloud.gov environment (i.e. either the staging or
      production environment) are located in the appropriate manifest_*.yml
      file or stored in and provided by a cloud.gov "custom user provided
      service".
    references:
      - verification: cups
  - standard_key: NIST-800-53
    control_key: CM-8   # Information System Component Inventory
    narrative: >
      In addition to the controls provided by cloud.gov, the application
      tracks components through versioned library dependencies
      (requirements.txt), as well as a listing of relevant cloud.gov services
      (mentioned in the README)
# TODO:
# IA-2
# IA-2 (1)
# IA-2 (2)
# IA-2 (12)
# PL-8
# RA-5
# SA-11 (1)
# SA-22 (1)
# SC-7
# SC-12 (1)
# SC-13
# SC-28 (1)
# SI-2
# SI-4
# SI-10
